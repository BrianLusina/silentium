buildscript {
    ext.kotlin_version = '1.2.0'
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC5-6"
}

detekt {
    version = "1.0.0.RC5-6"
    profile("main") {
        input = "$projectDir/app"
        config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven { url 'https://maven.google.com' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Gets keystore properties file from r*/
def getKeyStorePropertiesFile = { ->
    try {
        return rootProject.file("keystores/keystore.properties")
    } catch (Exception ignored) {
        return new File(System.getenv("BUDDYBUILD_SECURE_FILES") + "/keystore.properties")
    }
}

/**
 * Gets the service account email gradle.properties file, Ensure that you have a
 * gradle.properties file in root project directory
 * */
def getSilentiumServiceAccountKey = { ->
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("SILENTIUM_SERVICE_ACCOUNT_EMAIL")
    } catch (Exception ignored) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(System.getenv("BUDDYBUILD_SECURE_FILES") + "/gradle.properties"))
        return properties.getProperty("SILENTIUM_SERVICE_ACCOUNT_EMAIL")
    }
}

/**
 * Gets the release track to use for deployment
 * Release tracks are either "alpha", "beta", "production", "rollout"
 * */
def getReleaseTrack = { ->
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return Integer.parseInt(properties.getProperty("RELEASE_TRACK"))
    } catch (ignored) {
        return "beta"
    }
}

/**
 * Get version code from git history
 * This will dynamically increase the version code
 * If it fails to get from git, it will get it from the properties file, ensure that there is a properties
 * file at root of project
 * */
def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-list", "--first-parent", "--count", "origin/master"
            standardOutput = stdout
        }
        Random random = new Random()

        // this ensures that the version code remains unique for every build
        def number = 50 + random.nextInt(150) + random.nextInt(20) * random.nextInt(10)
        return Integer.parseInt(stdout.toString().trim()) + number
    } catch (ignored) {
        try {
            Properties properties = new Properties()
            properties.load(new FileInputStream("gradle.properties"))
            return Integer.parseInt(properties.getProperty("VERSION_CODE"))
        } catch (ignore) {
            Properties properties = new Properties()
            properties.load(new FileInputStream(System.getenv("BUDDYBUILD_SECURE_FILES") + "/gradle.properties"))
            return Integer.parseInt(properties.getProperty("VERSION_CODE"))
        }
    }
}

/**
 * Get version name will ensure that the version name of the application remains unique and ever changing
 * for easier tracking. This will pull the information from git
 * */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe" "--dirty"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        try {
            Properties properties = new Properties()
            properties.load(new FileInputStream("gradle.properties"))
            return properties.getProperty("VERSION_NAME")
        } catch (ignore) {
            Properties properties = new Properties()
            properties.load(new FileInputStream(System.getenv("BUDDYBUILD_SECURE_FILES") + "/gradle.properties"))
            return properties.getProperty("VERSION_NAME")
        }
    }
}

ext {
    compileSdkVersion = 26
    buildToolsVersion = "26.0.2"
    supportLibVersion = "27.0.2"
    minSdkVersion = 16
    targetSdkVersion = 26
    versionCode = getVersionCode()
    versionName = getVersionName()

    // multidex
    multidexSupport = "1.0.1"

    // room
    roomVersion = "1.0.0"

    //rx
    rxAndroidVersion = "2.0.1"
    rxKotlinVersion = "2.2.0"

    // play services
    playServicesVersion = "11.6.2"

    // dagger
    daggerVersion = "2.13"

    // anko version
    ankoVersion = "0.10.3"

    // gson version
    gsonVersion = "2.8.2"

    espressoVersion = "2.2.2"
    jUnitVerion = "4.12"

    // robolectric
    robolectricVersion = "3.6-alpha-1"

    // truth
    truthVersion = "0.36"

    // keystore
    keystorePropertiesFile = getKeyStorePropertiesFile()
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(ext.keystorePropertiesFile))

    pJsonKeyFile = rootProject.file("keystores/silentium_publish_key.json")
    serviceAccountEmail = getSilentiumServiceAccountKey()

    releaseTrack = getReleaseTrack()

    /**
     * Set this to true to create two separate APKs instead of one:
     *   - An APK that only works on ARM devices
     *   - An APK that only works on x86 devices
     * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
     * the correct one based on the CPU architecture of their device.
     */
    enableSeparateBuildPerCPUArchitecture = true

    // If true, also generate a universal APK
    enableUniversalApk = true

    // ABI codes
    abiCodes = ["armeabi": 3, "armeabi-v7a": 4, "arm64-v8a": 5, "mips": 6, "x86": 7, "x86_64": 8]
}